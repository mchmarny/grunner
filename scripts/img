#!/bin/bash

# This script creates new image from the template VM.
# The content of template VM is created using the img-startup script.
# The template VM is deleted once the image is created.

set -euo pipefail

# validation and defaults
gcloud=$(which gcloud) || ( echo "gcloud not found" && exit 1 )

PROJECT=$(gcloud config get-value project)
if [[ -z "${PROJECT}" ]]; then
  echo "PROJECT not set, 'gcloud config set project <your-project-id>'."
  exit 1
fi;

REGION=$(gcloud config get-value compute/region)
if [[ -z "${REGION}" ]]; then
  REGION="us-west1"
fi;

# ensure apis are enabled
gcloud services enable compute.googleapis.com --project $PROJECT

# variables
NAME="grunner-template-vm"
ZONE="${REGION}-c"
NOW=$(date +"%Y%m%d%H%M")
IMAGE="${NAME}-v${NOW}"
DIR="$(dirname "$0")"

# function to print log
log() {
  printf '>>> %s\n' "$@"
}

# wait for startup script to finish
wait_startup_finished() {
    local readonly name=${1:?"vm name required"}
    local readonly zone=${2:?"vm zone required"}
    
    local readonly limit=100 # 100 * 3 = 300 seconds == 5 minutes
    local readonly interval=3
    local readonly vmwait=60

    local status=""
    local counter=0

    echo "Waiting for VM to start ..."
    sleep $vmwait;
    
    echo -n "Waiting for startup script to finish ..."

    while [[ -z "$status" ]]
    do
        sleep $interval;
        ((counter++))
        if [ "$counter" -gt "$limit" ]; then
            echo "ERROR: startup script did not finish in time"
            exit 1
        fi

        echo -n "." # print a dot every interval
        line=$(gcloud compute ssh $name \
            --tunnel-through-iap \
            --zone $zone \
            --ssh-flag="-q" \
            --command='sudo journalctl -u google-startup-scripts.service | grep -m 1 "startup-script exit status"' 2>/dev/null || true)
        status=$(echo $line | awk '{print $NF}')
    done

    if [ "$status" != "0" ]; then
        echo "ERROR: startup script finished with an invalid exit status: $status"
        exit 1
    fi

    echo " done"
}

# delete old VM if it already exists
old=$(gcloud compute instances list \
    --project $PROJECT \
    --filter $NAME \
    --format "value(name)")
if [[ ! -z "$old" ]]; then
    log "Deleting existing template VM: ${NAME}"
    gcloud compute instances delete $NAME --project $PROJECT --zone $ZONE
fi

# start by creating the template VM using the startup script
log "Creating template VM (${NAME}) using ${DIR}/img-startup"
gcloud compute instances create $NAME \
    --project $PROJECT \
    --zone $ZONE \
    --machine-type e2-medium \
    --scopes https://www.googleapis.com/auth/cloud-platform \
    --image ubuntu-2204-jammy-v20230616 \
    --image-project ubuntu-os-cloud \
    --metadata-from-file "startup-script=${DIR}/img-startup"

# Make sure the startup script has finished executing
wait_startup_finished $NAME $ZONE

# stop the VM to prevent data corruption
log "Stopping template VM (${NAME}/$ZONE)"
gcloud compute instances stop $NAME \
    --project $PROJECT \
    --zone $ZONE

# disable auto-delete option for the disk
log "Disabling disk auto-delete on ${NAME}"
gcloud compute instances set-disk-auto-delete $NAME \
    --project $PROJECT \
    --no-auto-delete \
    --disk $NAME

# Create a new image from the disk
log "Creating disk image: ${IMAGE} using ${NAME}"
gcloud compute images create $IMAGE \
    --source-disk $NAME \
    --source-disk-zone $ZONE \
    --storage-location us

# Delete the VM
log "Deleting template VM (${NAME})"
gcloud compute instances delete $NAME \
    --project $PROJECT \
    --zone $ZONE

# Print the image name
echo "=========================================================="
echo "Image created: ${PROJECT}/${IMAGE}"
echo "=========================================================="
